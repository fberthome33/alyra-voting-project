{"version":3,"sources":["getWeb3.js","components/AddVoter.js","Proposal.js","components/AddProposal.js","components/VotingSession.js","components/TallyVotingSession.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","on","location","reload","provider","providers","WebsocketProvider","AddVoter","props","addVoter","e","preventDefault","state","accounts","contract","owner","listAddress","newAddress","address","value","methods","send","from","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","this","map","addresse","Form","Group","controlId","Label","Control","type","id","placeholder","ref","input","Button","onClick","React","Component","Proposal","description","voteCount","AddProposal","useState","listProposal","stateProposal","setStateProposal","setProposalEventValue","setSetProposalEventValue","useEffect","options","fromBlock","toBlock","getPastEvents","listProposalEvents","forEach","indexProps","returnValues","proposalId","getOneProposal","Number","call","proposal","push","s","events","ProposalRegistered","event","then","newProps","alert","error","addProposal","newProposalDesc","voter","VotingSession","setVote","index","hasVoted","votedProposalId","TallyVotingSession","tallyVotes","winningProposalID","workflowStatus","App","steps","title","buttonLabel","goToNextStep","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","setState","useRef","setEventValue","setSetEventValue","eth","getAccounts","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","getVoter","data","voterEvent","voterAddress","VoterRegistered","changed","str","methodToCall","className","activeStep","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a106976.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          console.log('window ethereum')\n          window.ethereum.on('accountsChanged', function() {\n            window.location.reload();\n          });\n          window.ethereum.on('chainChanged', function() {\n            window.location.reload();\n          })\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.WebsocketProvider(\n          \"ws://127.0.0.1:8545\"\n        );\n        console.log('localhost')\n        /*const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );*/\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Table from 'react-bootstrap/Table';\n\nexport default class AddVoter extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n    addVoter = async (e) => {\n      e.preventDefault();\n      const { accounts, contract, owner, listAddress } = this.props.state;\n      let newAddress = this.props.state.address.value;\n      await contract.methods.addVoter(newAddress).send({ from: accounts[0] });\n      //listAddress.push(newAddress);\n      //setState(s => ({...s, listAddress: listAddress}))\n    }\n\n\n    render(){\n        return(\n      <><div style={{ display: 'flex', justifyContent: 'center' }}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Add Voter Account</strong></Card.Header>\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>@</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {this.props.state.listAddress !== null &&\n                          this.props.state.listAddress.map((addresse) => (\n                            <tr><td>{addresse}</td></tr>\n                          ))}\n                      </tbody>\n                    </Table>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </div><br></br>\n          { this.props.state.accounts && this.props.state.accounts[0] && this.props.state.accounts[0] === this.props.state.owner &&\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Card style={{ width: '50rem' }}>\n                <Card.Header><strong>Add a new Voter</strong></Card.Header>\n                <Card.Body>\n                  <Form.Group controlId=\"formAddress\">\n                    <Form.Label>Voter address</Form.Label>\n                    <Form.Control type=\"text\" id=\"address\" placeholder=\"Enter address\" \n                      ref={(input) => { this.props.state.address = input; } } />\n                  </Form.Group>\n                  <Button onClick={this.addVoter} variant=\"dark\"> Autoriser </Button>\n                </Card.Body>\n              </Card>\n            </div>\n          }</>\n        )\n    }\n\n}","export const Proposal = function (id, description, voteCount) {\n    this.id = id;\n    this.description = description;\n    this.voteCount = voteCount;\n  };","import React, { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Table from 'react-bootstrap/Table';\nimport { Proposal } from '../Proposal';\n\nfunction AddProposal ({\n    state\n}) {\n  const [stateProposal, setStateProposal] = useState({ listProposal: []});\n  const [setProposalEventValue, setSetProposalEventValue] = useState (0)\n\n\n  useEffect(() => {\n    (async function () {\n      try {\n        let options = {\n          fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n          toBlock: 'latest'\n        };\n        const listProposalEvents = (await state.contract.getPastEvents('ProposalRegistered', options));\n        const listProposal = [];\n        listProposalEvents.forEach(async(indexProps) => \n        { \n          console.log(indexProps.returnValues.proposalId)\n          const proposal =  await state.contract.methods.getOneProposal(Number(indexProps.returnValues.proposalId)).call({ from: state.accounts[0]});\n          listProposal.push(new Proposal(Number(indexProps.returnValues.proposalId), proposal.description, proposal.voteCount ));\n          setStateProposal(s => ({...s, listProposal: listProposal}))\n          console.log(listProposal);\n        });\n\n        state.contract.events.ProposalRegistered()\n          .on('data', event => {\n            let value = event.returnValues.proposalId;\n            console.log(value);\n\n            state.contract.methods.getOneProposal(Number(value)).call({ from: state.accounts[0]}).then((proposal) => {\n              const newProps = new Proposal(Number(value), proposal.description, proposal.voteCount )\n              setSetProposalEventValue(newProps);\n            })\n          })\n\n        setStateProposal(s => ({...s, listProposal: listProposal}))\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to init proposal component.`,\n        );\n        console.error(error);\n      }\n    })();\n  }, [])\n\n  useEffect(()=> {\n    console.log(stateProposal);\n    const { listProposal } = stateProposal;\n    listProposal.push(setProposalEventValue);\n    setStateProposal(s => ({...s, listProposal: listProposal}))\n  }, [setProposalEventValue])\n\n\n    const addProposal = async (e) => {\n      e.preventDefault();\n      const { accounts, contract, owner, listAddress } = state;\n      let newProposalDesc = state.proposal.value;\n      await contract.methods.addProposal(newProposalDesc).send({ from: accounts[0] });\n    }\n\n        return(\n      <><div style={{ display: 'flex', justifyContent: 'center' }}>\n\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>List of Proposals</strong></Card.Header>\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>Id</th>\n                          <th>Description</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {stateProposal.listProposal !== null &&\n                          stateProposal.listProposal.map((proposal) => (\n                            <tr><td>{proposal.id}</td><td>{proposal.description}</td></tr>\n                          ))}\n                      </tbody>\n                    </Table>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </div>\n          \n          { state.voter &&\n          <>\n          <br></br>\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Card style={{ width: '50rem' }}>\n                <Card.Header><strong>Add a proposal</strong></Card.Header>\n                <Card.Body>\n                  <Form.Group controlId=\"formProposal\">\n                    <Form.Label>Proposal Description</Form.Label>\n                    <Form.Control type=\"text\" id=\"proposal\" placeholder=\"Enter proposal description\" \n                      ref={(input) => { state.proposal = input; } } />\n                  </Form.Group>\n                  <Button onClick={addProposal} variant=\"dark\"> Add </Button>\n                </Card.Body>\n              </Card>\n            </div>\n            </>\n          }</>\n        )\n    }\n    export default AddProposal;","import React, { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Table from 'react-bootstrap/Table';\nimport { Proposal } from '../Proposal';\n\nfunction VotingSession ({\n    state\n}) {\n  const [stateProposal, setStateProposal] = useState({ listProposal: []});\n  const [setProposalEventValue, setSetProposalEventValue] = useState (0)\n\n\n  useEffect(() => {\n    (async function () {\n      try {\n        let options = {\n          fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n          toBlock: 'latest'\n        };\n        const listProposalEvents = (await state.contract.getPastEvents('ProposalRegistered', options));\n        const listProposal = [];\n        listProposalEvents.forEach(async(indexProps) => \n        { \n          console.log(indexProps.returnValues.proposalId)\n          const proposal =  await state.contract.methods.getOneProposal(Number(indexProps.returnValues.proposalId)).call({ from: state.accounts[0]});\n          listProposal.push(new Proposal(Number(indexProps.returnValues.proposalId), proposal.description, proposal.voteCount ));\n          setStateProposal(s => ({...s, listProposal: listProposal}))\n          console.log(listProposal);\n        });\n\n        state.contract.events.ProposalRegistered()\n          .on('data', event => {\n            let value = event.returnValues.proposalId;\n            console.log(value);\n\n            state.contract.methods.getOneProposal(Number(value)).call({ from: state.accounts[0]}).then((proposal) => {\n              const newProps = new Proposal(Number(value), proposal.description, proposal.voteCount )\n              setSetProposalEventValue(newProps);\n            })\n          })\n\n        setStateProposal(s => ({...s, listProposal: listProposal}))\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to init proposal component.`,\n        );\n        console.error(error);\n      }\n    })();\n  }, [])\n\n  useEffect(()=> {\n    console.log(stateProposal);\n    const { listProposal } = stateProposal;\n    listProposal.push(setProposalEventValue);\n    setStateProposal(s => ({...s, listProposal: listProposal}))\n  }, [setProposalEventValue])\n\n\n    const setVote = async (e, index) => {\n      e.preventDefault();\n      const { accounts, contract } = state;\n      //let newProposalDesc = this.props.state.proposalId.value;\n      await contract.methods.setVote(Number(index)).send({ from: accounts[0] });\n      stateProposal.listProposal[index].voteCount++;\n      setStateProposal(s => ({...s, listProposal: stateProposal.listProposal}))\n    }\n\n        return(\n      <><div style={{ display: 'flex', justifyContent: 'center' }}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Vote for a proposal</strong></Card.Header>\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>Id</th>\n                          <th>Description</th>\n                          <th>Vote Count</th>\n                          <th>Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {stateProposal.listProposal !== null &&\n                          stateProposal.listProposal.map((proposal) => (\n                            <tr>\n                              <td>{proposal.id}</td>\n                              <td>{proposal.description}</td>\n                              <td>{proposal.voteCount}</td>\n                              <td>\n                              { state.voter && !state.voter.hasVoted &&\n                                    <Button onClick={(e) => setVote(e, proposal.id)} variant=\"dark\"> Voter </Button>\n                              }\n                              { state.voter && state.voter.hasVoted && state.voter.votedProposalId == proposal.id &&\n                                <span>Vous avez vote pour cette proposition</span>\n                              }\n\n                              </td></tr>\n                          ))}\n                      </tbody>\n                    </Table>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </div>\n          \n</>\n        )\n    }\n    export default VotingSession;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nexport default class TallyVotingSession extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n\n\n    }\n\n    setVote = async (e) => {\n      e.preventDefault();\n      const { accounts, contract } = this.props.state;\n      let newProposalDesc = this.props.state.proposalId.value;\n      await contract.methods.setVote(newProposalDesc).send({ from: accounts[0] });\n\n\n    }\n\n    tallyVotes = async (e) => {\n      e.preventDefault();\n      const { accounts, contract } = this.props.state;\n      //let newProposalDesc = this.props.state.proposalId.value;\n      await contract.methods.tallyVotes().send({ from: accounts[0] });\n\n      this.props.state.winningProposalID = Number(await contract.methods.winningProposalID().call());\n      this.props.state.workflowStatus  = Number(await contract.methods.workflowStatus().call());\n    }\n\n    render(){\n        return(\n      <><div style={{ display: 'flex', justifyContent: 'center' }}>\n\n            <Card style={{ width: '50rem' }}>\n              <Card.Header>\n              { this.props.state.workflowStatus === 4 &&\n                <strong> Vote Not Tallied\n                </strong>\n              }\n              { this.props.state.workflowStatus === 5 &&\n                <strong> The winner is \n                </strong>\n              }\n              </Card.Header>\n              <Card.Body>\n              { this.props.state.workflowStatus === 5 && this.props.state.voter &&\n                <strong>\n                  id: {this.props.state.listProposal[this.props.state.winningProposalID]?.id}\n                  <br/>\n                  description: {this.props.state.listProposal[this.props.state.winningProposalID]?.description}\n                  <br/>\n                  voteCount: {this.props.state.listProposal[this.props.state.winningProposalID]?.voteCount}\n                </strong>\n              }\n              { this.props.state.workflowStatus === 5 && this.props.state.accounts && this.props.state.accounts[0] && this.props.state.accounts[0] === this.props.state.owner &&\n                <strong>\n                  {this.props.state.winningProposalID}\n                </strong>\n              }\n              </Card.Body>\n            </Card>\n          </div><br></br>\n          { this.props.state.accounts && this.props.state.accounts[0] && this.props.state.accounts[0] === this.props.state.owner &&\n           this.props.state.workflowStatus === 4 && \n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Card style={{ width: '50rem' }}>\n                <Card.Header><strong>Tally Vote</strong></Card.Header>\n                <Card.Body>\n                  <Form.Group controlId=\"formProposal\">\n                    <Form.Control type=\"text\" id=\"proposal\"\n                      ref={(input) => { this.props.state.proposalId = input; } } />\n                  </Form.Group>\n                  <Button onClick={this.tallyVotes} variant=\"dark\"> Tally Vote </Button>\n                </Card.Body>\n              </Card>\n            </div>\n          }</>\n        )\n    }\n\n}","import React, { useEffect, useState, useRef } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Stepper from 'react-stepper-horizontal';\nimport \"./App.css\";\nimport AddVoter from \"./components/AddVoter\";\nimport AddProposal from \"./components/AddProposal\";\nimport VotingSession from \"./components/VotingSession\";\nimport TallyVotingSession from \"./components/TallyVotingSession\";\n\nfunction App() {\n\n\n\n  const steps= [{\n    title: 'Add Voter',\n    buttonLabel: 'startProposalsRegistering',\n    onClick: async(e) => {\n      e.preventDefault()\n      console.log('onClick', 1)\n      goToNextStep(state.contract.methods.startProposalsRegistering());\n    }\n  }, {\n    title: 'Proposals Registering',\n    buttonLabel: 'endProposalsRegistering',\n    onClick: (e) => {\n      e.preventDefault()\n      console.log('onClick', 2)\n      goToNextStep(state.contract.methods.endProposalsRegistering());\n    }\n  }, {\n    title: 'Proposal is ended',\n    buttonLabel: 'startVotingSession',\n    onClick: (e) => {\n      e.preventDefault()\n      console.log('onClick', 3)\n      goToNextStep(state.contract.methods.startVotingSession());\n    }\n  }, {\n    title: 'Voting Session',\n    buttonLabel: 'endVotingSession',\n    onClick: (e) => {\n      e.preventDefault()\n      console.log('onClick', 4)\n      goToNextStep(state.contract.methods.endVotingSession());\n    }\n    }, {\n      title: 'Voting Session Ended',\n  }];\n\n\n\n  const [state, setState] = useState({ steps: steps, owner: null, workflowStatus: 0, listAddress: [], web3: null, accounts: null, contract: null });\n  const inputRef = useRef();\n  const [setEventValue, setSetEventValue] = useState (0)\n  \n  useEffect(() => {\n    (async function () {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n        setState(s => ({...s, accounts: accounts}))\n        console.log(accounts);\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Voting.networks[networkId];\n        const instance = new web3.eth.Contract(\n          Voting.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n\n        let owner = await instance.methods.owner().call();\n        \n        let voter;\n        instance.methods.getVoter(accounts[0]).call({ from: accounts[0]}).then((data) =>\n          voter = data);\n\n        const workflowStatus = Number(await instance.methods.workflowStatus().call());\n        const winningProposalID = Number(await instance.methods.winningProposalID().call());\n        \n        let options = {\n          fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n          toBlock: 'latest'\n        };\n        const listAddress = (await instance.getPastEvents('VoterRegistered', options)).map(voterEvent => voterEvent.returnValues.voterAddress);\n        \n\n\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        setState({ steps: steps, owner: owner, voter: voter, workflowStatus: workflowStatus, listAddress: listAddress, listProposal: [], web3: web3, accounts: accounts, contract: instance, winningProposalID: winningProposalID });\n\n        instance.events.VoterRegistered()\n          .on('data', event => {\n            let value = event.returnValues.voterAddress;\n            console.log(value);\n            //updateVoter(value);\n            setSetEventValue(value);\n          })\n\n  \n\n          .on('changed', changed => console.log(changed))\n          // .on('error', err => throw err)\n          .on('connected', str => {console.log('connected');\n          console.log(str)})\n          console.log(state);\n         \n\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    })();\n  }, [])\n\n  useEffect(()=> {\n    console.log(state);\n    const { listAddress } = state;\n    listAddress.push(setEventValue);\n    setState(s => ({...s, listAddress: listAddress}))\n  }, [setEventValue])\n\n\n  const goToNextStep = (methodToCall) => {\n    methodToCall.send({ from: state.accounts[0] }).then( () => {\n    const { accounts, contract, owner, listAddress } = state;\n    \n    setState(s => ({...s, workflowStatus: state.workflowStatus + 1}));\n    });\n  }\n  \n  const buttonStyle = { background: '#E0E0E0', width: 200, padding: 16, textAlign: 'center', margin: '0 auto', marginTop: 32 };\n\n\n  return (\n    <div className=\"App\">\n    <div>\n        <h2 className=\"text-center\">Voting System</h2>\n        <hr></hr>\n        Account user : {state.accounts && state.accounts[0]}\n        { state.accounts && state.accounts[0] && state.accounts[0] === state.owner &&\n          <h2>You are the contrat owner</h2>\n        }\n        { state.voter &&\n        <h2>You are the voter</h2>\n        }\n        <br></br>\n    </div>\n\n    <div>\n        <Stepper steps={ steps } activeStep={ state.workflowStatus }  />\n        <br/>\n        {state.workflowStatus  === 0 && (\n          <>\n            <AddVoter state={state} />\n          </>\n        )}\n        {state.workflowStatus  === 1 && (\n          <>\n            <AddProposal state={state} />\n          </>\n        )}\n        {state.workflowStatus  === 3 && (\n          <>\n            <VotingSession state={state} />\n          </>\n        )}\n\n        {state.workflowStatus >= 4 && (\n          <>\n            <TallyVotingSession state={state} />\n          </>\n        )}\n        { state.accounts && state.accounts[0] && state.accounts[0] === state.owner && steps[state.workflowStatus]?.onClick && \n        <button type=\"button\" onClick={ steps[state.workflowStatus ].onClick }>{ steps[state.workflowStatus ].buttonLabel}</button>\n        }\n        </div>\n    <br></br>\n  </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}